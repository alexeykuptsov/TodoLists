// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TodoLists.App.Entities;

#nullable disable

namespace TodoLists.App.Migrations
{
    [DbContext(typeof(TodoListsDbContext))]
    [Migration("20230706131025_CreateV1_0_0")]
    partial class CreateV100
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("TodoLists.App.Entities.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_profiles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_profiles_name");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("TodoLists.App.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint")
                        .HasColumnName("profile_id");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_projects_profile_id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("TodoLists.App.Entities.SuperUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("UsernameLowerCase")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_lower_case");

                    b.HasKey("Id")
                        .HasName("pk_super_users");

                    b.HasIndex("UsernameLowerCase")
                        .IsUnique()
                        .HasDatabaseName("ix_super_users_username_lower_case");

                    b.ToTable("super_users", (string)null);
                });

            modelBuilder.Entity("TodoLists.App.Entities.TodoItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint")
                        .HasColumnName("profile_id");

                    b.HasKey("Id")
                        .HasName("pk_todo_items");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_todo_items_profile_id");

                    b.ToTable("todo_items", (string)null);
                });

            modelBuilder.Entity("TodoLists.App.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint")
                        .HasColumnName("profile_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("UsernameLowerCase")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username_lower_case");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("ProfileId", "UsernameLowerCase")
                        .IsUnique()
                        .HasDatabaseName("ix_users_profile_id_username_lower_case");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TodoLists.App.Entities.Project", b =>
                {
                    b.HasOne("TodoLists.App.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_profiles_profile_id");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("TodoLists.App.Entities.TodoItem", b =>
                {
                    b.HasOne("TodoLists.App.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todo_items_profiles_profile_id");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("TodoLists.App.Entities.User", b =>
                {
                    b.HasOne("TodoLists.App.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_profiles_profile_id");

                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
